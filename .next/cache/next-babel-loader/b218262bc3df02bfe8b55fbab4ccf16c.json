{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\projectA1Platform\\\\pages\\\\_app.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport AppLayout from '../components/AppLayout';\nimport rootReducer from '../reducers';\n\nvar Main = function Main(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store;\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(AppLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Component, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  })));\n};\n\nMain.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  store: PropTypes.object.isRequired\n};\n\nvar configStore = function configStore(initialState, options) {\n  var middlewares = [];\n  var enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware.apply(void 0, middlewares)) : compose(applyMiddleware.apply(void 0, middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(rootReducer, initialState, enhancer);\n  return store;\n};\n\nexport default withRedux(configStore)(Main); //고차 컴포넌트 기존 컴포넌트의 기능을 확정할 때 사용합니다.","map":{"version":3,"sources":["C:\\Users\\USER\\projectA1Platform\\pages\\_app.js"],"names":["React","PropTypes","Provider","withRedux","createStore","compose","applyMiddleware","AppLayout","rootReducer","Main","Component","store","propTypes","elementType","isRequired","object","configStore","initialState","options","middlewares","enhancer","process","env","NODE_ENV","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,eAA9B,QAAoD,OAApD;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAwB;AAAA,MAAtBC,SAAsB,QAAtBA,SAAsB;AAAA,MAAXC,KAAW,QAAXA,KAAW;AACnC,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD,CARD;;AAUAF,IAAI,CAACG,SAAL,GAAiB;AACfF,EAAAA,SAAS,EAACT,SAAS,CAACY,WAAV,CAAsBC,UADjB;AAEfH,EAAAA,KAAK,EAACV,SAAS,CAACc,MAAV,CAAiBD;AAFR,CAAjB;;AAKA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,YAAD,EAAeC,OAAf,EAAyB;AAE3C,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACblB,OAAO,CAACC,eAAe,MAAf,SAAmBa,WAAnB,CAAD,CADM,GAEbd,OAAO,CACTC,eAAe,MAAf,SAAmBa,WAAnB,CADS,EAET,CAACD,OAAO,CAACM,QAAT,IAAoBC,MAAM,CAACC,4BAAP,KAAwC,WAA5D,GACAD,MAAM,CAACC,4BAAP,EADA,GAEA,UAACC,CAAD;AAAA,WAAOA,CAAP;AAAA,GAJS,CAFX;AAQA,MAAMhB,KAAK,GAAGP,WAAW,CAACI,WAAD,EAAcS,YAAd,EAA4BG,QAA5B,CAAzB;AACA,SAAOT,KAAP;AACD,CAbD;;AAcA,eAAeR,SAAS,CAACa,WAAD,CAAT,CAAuBP,IAAvB,CAAf,C,CACA","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport {Provider} from 'react-redux'\r\nimport withRedux from 'next-redux-wrapper'\r\nimport {createStore, compose, applyMiddleware} from 'redux';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\nimport rootReducer from '../reducers';\r\n\r\n\r\nconst Main = ({Component, store}) => {\r\n  return(\r\n    <Provider store={store}>\r\n      <AppLayout>\r\n        <Component/>\r\n      </AppLayout>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nMain.propTypes = {\r\n  Component:PropTypes.elementType.isRequired,\r\n  store:PropTypes.object.isRequired\r\n}\r\n\r\nconst configStore = (initialState, options)=>{\r\n\r\n  const middlewares = [];\r\n  const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(applyMiddleware(...middlewares))\r\n    : compose(\r\n    applyMiddleware(...middlewares),\r\n    !options.isServer&& window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION__() :\r\n    (f) => f)\r\n\r\n  const store = createStore(rootReducer, initialState, enhancer);\r\n  return store\r\n}\r\nexport default withRedux(configStore)(Main);\r\n//고차 컴포넌트 기존 컴포넌트의 기능을 확정할 때 사용합니다.\r\n"]},"metadata":{},"sourceType":"module"}